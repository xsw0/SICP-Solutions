#lang sicp

(define (square x) (* x x))

(define (fast-expt base exponent)
  (define (iter base exponent a)
    (cond ((= exponent 0) a)
          ((= (remainder exponent 2) 0)
           (iter (square base)
                 (/ exponent 2)
                 a))
          (else
           (iter base
                 (- exponent 1)
                 (* a base)))))
  (cond ((and (= base 0) (= exponent 0))
         (error "0^0"))
        ((or (= base 0) (= base 1)) base)
        (else (iter base exponent 1))))

; (fast-expt 0 0)
(fast-expt 1 0)
(fast-expt 1 1)
(fast-expt 1 2)
(fast-expt 2 0)
(fast-expt 2 1)
(fast-expt 2 2)
(fast-expt 2 3)
(fast-expt 2 4)
(fast-expt 2 5)
(fast-expt 2 6)
(fast-expt 2 7)
(fast-expt 2 8)
(fast-expt 2 9)
(fast-expt 2 10)
(fast-expt 3 0)
(fast-expt 3 1)
(fast-expt 3 2)
(fast-expt 3 3)
(fast-expt 3 4)
(fast-expt 4 0)
(fast-expt 4 1)
(fast-expt 4 2)
(fast-expt 4 3)
(fast-expt 4 4)
(fast-expt 5 0)
(fast-expt 5 1)
(fast-expt 5 2)
(fast-expt 5 3)
(fast-expt 5 4)
