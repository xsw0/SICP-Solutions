#lang sicp
(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cadr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-car! (cdr deque) item))
(define (set-prev! l item) (set-car! (cdr l) item))
(define (set-next! l item) (set-car! (cddr l) item))
(define (prev l) (cadr l))
(define (next l) (caddr l))

(define (empty-deque? deque) (null? (front-ptr deque)))
(define (make-deque) (list '() '()))

(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (car (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (car (rear-ptr deque))))

(define (front-insert-deque! deque item)
  (cond ((empty-deque? deque)
         (let ((new-pair (list item '() '())))
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque))
        (else
         (set-front-ptr! deque (list item '() (cons (car (front-ptr deque)) (cdr (front-ptr deque)))))
         (set-prev! (next (front-ptr deque)) (cons (car (front-ptr deque)) (cdr (front-ptr deque))))
         deque)))
(define (rear-insert-deque! deque item)
  (cond ((empty-deque? deque)
         (let ((new-pair (list item '() '())))
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque))
        (else
         (set-rear-ptr! deque (list item (cons (car (rear-ptr deque)) (cdr (rear-ptr deque))) '()))
         (set-next! (prev (rear-ptr deque)) (cons (car (rear-ptr deque)) (cdr (rear-ptr deque))))
         deque)))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        ((eq? (next (front-ptr deque)) '())
         (set-front-ptr! deque '())
         (set-rear-ptr! deque '()))
        (else
         (set-prev! (next (front-ptr deque)) '())
         (set-front-ptr! deque (next (front-ptr deque)))
         deque)))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "DELETE! called with an empty deque" deque))
        ((eq? (prev (rear-ptr deque)) '())
         (set-front-ptr! deque '())
         (set-rear-ptr! deque '()))
        (else
         (set-next! (prev (rear-ptr deque)) '())
         (set-rear-ptr! deque (prev (rear-ptr deque)))
         deque)))

(define (print-deque deque)
  (define (iter p)
    (if (or (null? p) (not (pair? p)))
        '()
        (cons (car p) (iter (next p)))))
  (display (front-ptr deque))
  (newline)
  (display (rear-ptr deque))
  (newline)
  (iter (front-ptr deque)))

(define q1 (make-deque))
(front-insert-deque! q1 'a) ; ((a) a)
(print-deque q1)            ; (a)
(front-insert-deque! q1 'b) ; ((a b) b)
(print-deque q1)            ; (a b)
(rear-delete-deque! q1)     ; ((b) b)
(print-deque q1)            ; (b)
(rear-delete-deque! q1)     ; (() b)
(print-deque q1)            ; ()