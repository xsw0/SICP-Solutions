#lang sicp
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (empty?) (null? front-ptr))
    (define (front)
      (if (empty?)
          (error "FRONT called with an empty queue")
          (car front-ptr)))
    (define (insert! item)
      (let ((new-pair (cons item '())))
        (if (empty?)
            (begin (set-front-ptr! new-pair)
                   (set-rear-ptr! new-pair))
            (begin (set-cdr! rear-ptr new-pair)
                   (set-rear-ptr! new-pair)))))
    (define (delete!)
      (if (empty?)
          (error "DELETE! called with an empty queue")
          (set-front-ptr! (cdr front-ptr))))
    (define (print) front-ptr)
    (define (dispatch m)
      (cond ((eq? m 'front-ptr) front-ptr)
            ((eq? m 'rear-ptr) rear-ptr)
            ((eq? m 'set-front-ptr!) set-front-ptr!)
            ((eq? m 'set-rear-ptr!) set-rear-ptr!)
            ((eq? m 'empty?) empty?)
            ((eq? m 'front) front)
            ((eq? m 'insert!) insert!)
            ((eq? m 'front-ptr) front-ptr)
            ((eq? m 'delete!) delete!)
            ((eq? m 'print) print)
            (else (error "message not found"))))
    dispatch))

(define q1 (make-queue))
((q1 'insert!) 'a) ; ((a) a)
((q1 'print))      ; (a)
((q1 'insert!) 'b) ; ((a b) b)
((q1 'print))      ; (a b)
((q1 'delete!))    ; ((b) b)
((q1 'print))      ; (b)
((q1 'delete!))    ; (() b)
((q1 'print))      ; ()