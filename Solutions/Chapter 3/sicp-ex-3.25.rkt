#lang sicp
(define (make-table same-key?)
  (define (assoc key records)
    (cond ((null? records) false)
          ((same-key? key (caar records)) (car records))
          (else (assoc key (cdr records)))))
  (let ((local-table (list '*table*)))
    (define (lookup . keys)
      (define (iter keys table)
        (if (null? keys)
            (cdr table)
            (let ((subtable (if (list? table)
                                (assoc (car keys) (cdr table))
                                #f)))
              (if subtable
                  (iter (cdr keys) subtable)
                  false))))
      (iter keys local-table))
    (define (insert! value . keys)
      (define (make keys)
        (if (null? keys)
            value
            (list (cons (car keys) (make (cdr keys))))))
      (define (iter keys table)
        (if (null? keys)
            (set-cdr! table value)
            (let ((subtable (if (list? table)
                                (assoc (car keys) (cdr table))
                                #f)))
              (if subtable
                  (iter (cdr keys) subtable)
                  (set-cdr! table
                            (if (list? (cdr table))
                                (cons (cons (car keys)
                                            (make (cdr keys)))
                                      (cdr table))
                                (make keys)))))))
      (iter keys local-table)
      'ok)
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            ((eq? m 'value) local-table)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define t (make-table equal?))
(define (insert! t v . keys) (apply (t 'insert!) (cons v keys)) (display t))
(define (lookup t . keys) (apply (t 'lookup) keys))
(define (display t) (t 'value))
(insert! t 'a 1 1)
(lookup t 1 1)
(insert! t 'b 2)
(insert! t 'c 3)
(insert! t 'c 2 3 4)
(insert! t 'd 2 3 5)
(insert! t 'e 2 3 6)
(lookup t 3 4)
(lookup t 2 3)
(lookup t 2 3 4)
(lookup t 1)
(insert! t 'x 1 1)
(insert! t 'y 2 3 4)
(lookup t 1 1)
(lookup t 2 3 4)
(lookup t 2 3 4)
(insert! t 'a 1 1)
(insert! t 'a 1 1)
(insert! t 'a 1 1)
(insert! t 'b 1)

(define t2 (make-table equal?))
(insert! t2 'a 1 1)
(lookup t2 1 1)
(insert! t2 'b 2)
(insert! t2 'c 3)
(insert! t2 'c 2 3 4)
(insert! t2 'd 2 3 5)
(insert! t2 'e 2 3 6)
(lookup t2 3 4)
(lookup t2 2 3)
(lookup t2 2 3 4)
(lookup t2 1)
(insert! t2 'x 1 1)
(insert! t2 'y 2 3 4)
(lookup t2 1 1)
(lookup t2 2 3 4)
;(table-delete! 2 3 4)
(lookup t2 2 3 4)
;; (table-draw)
