#lang racket
(define (make-mobile left right)
  (cons left right))
(define (make-branch length structure)
  (cons length structure))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (cdr mobile))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (cdr branch))
(define (branch-weight branch)
  (let ((hangs (branch-structure branch)))
    (if (pair? hangs)
        (total-weight hangs)
        hangs)))
(define (total-weight mobile)
  (+ (branch-weight (left-branch mobile))
     (branch-weight (right-branch mobile))))
(define (balanced? mobile)
  (define (branch-balanced? branch)
    (let ((hangs (branch-structure branch)))
      (if (pair? hangs)
          (balanced? hangs)
          hangs)))
  (let ((l (branch-balanced? (left-branch mobile)))
        (r (branch-balanced? (right-branch mobile))))
    (if (and l
             r
             (= (* l (branch-length (left-branch mobile)))
                (* r (branch-length (right-branch mobile)))))
        (+ l r)
        #f)))

(define m1 (make-mobile
            (make-branch 3 5)
            (make-branch 5
                         (make-mobile
                          (make-branch 1 2)
                          (make-branch 2 1)))))
(total-weight m1)
(balanced? m1)
